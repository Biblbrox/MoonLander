#version 330 core

layout (lines_adjacency) in;
layout (triangle_strip, max_vertices = 24) out;

uniform vec4 inColor;

in mat4 GeomProjectionMatrix[4];

out vec4 FragColor;

void main()
{
    // get the four vertices passed to the shader:
    vec2 p0 = vec2(gl_in[0].gl_Position.xy);	// start of previous segment
    vec2 p1 = vec2(gl_in[1].gl_Position.xy);	// end of previous segment, start of current segment
    vec2 p2 = vec2(gl_in[2].gl_Position.xy);	// end of current segment, start of next segment
    vec2 p3 = vec2(gl_in[3].gl_Position.xy);	// end of next segment

    float thickness = 0.5;

    // determine the direction of each of the 3 segments (previous, current, next)
    vec2 v0 = normalize(p1-p0); // Point to end of first segment
    vec2 v1 = normalize(p2-p1); // Point to end of second segment
    vec2 v2 = normalize(p3-p2); // Point to end of third segment

    // determine the normal of each of the 3 segments (previous, current, next)
    vec2 n0 = vec2(-v0.y, v0.x); // norm of the end of first segment
    vec2 n1 = vec2(-v1.y, v1.x); // norm of the end of second segment
    vec2 n2 = vec2(-v2.y, v2.x); // norm of the end of third segment

    // determine miter lines by averaging the normals of the 2 segments
    vec2 miter_a = normalize(n0 + n1);	// miter at start of current segment
    vec2 miter_b = normalize(n1 + n2);	// miter at end of current segment

    // determine the length of the miter by projecting it onto normal and then inverse it
    float length_a = thickness / dot(miter_a, n1);
    float length_b = thickness / dot(miter_b, n1);

    vec4 a = GeomProjectionMatrix[0] * vec4(p0 - length_a * miter_a, 0.0, 1.0);
    vec4 c = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0);
    vec4 f = GeomProjectionMatrix[0] * vec4(p2 + length_b * miter_b, 0.0, 1.0);

    bool fillArea = true;
    /**
    a*-------------*d
     |             |
     |             |
     |             |
     |             |
     |             |
    b*-------------*c
    **/
    if (fillArea) {
        FragColor = vec4(0.0, 0.0, 0.0, 1.0);
        float depth = -100.0;
        vec4 leftTrA = a;
        vec4 leftTrB = vec4(leftTrA.x, leftTrA.y + depth, leftTrA.z, leftTrA.w);
        vec4 leftTrD = c;
        vec4 leftTrC = vec4(leftTrD.x, leftTrD.y + depth, leftTrD.z, leftTrD.w);

        gl_Position = leftTrA; // a
        EmitVertex();
        gl_Position = leftTrB; // b
        EmitVertex();
        gl_Position = leftTrC; // c
        EmitVertex();
        EndPrimitive();

        gl_Position = leftTrC; // c
        EmitVertex();
        gl_Position = leftTrD; // d
        EmitVertex();
        gl_Position = leftTrA; // a
        EmitVertex();
        EndPrimitive();

        vec4 rightTrA = leftTrD;
        vec4 rightTrB = leftTrC;
        vec4 rightTrD = f;
        vec4 rightTrC = vec4(rightTrD.x, rightTrD.y + depth, rightTrD.z, rightTrD.w);

        gl_Position = rightTrA; // a
        EmitVertex();
        gl_Position = rightTrB; // b
        EmitVertex();
        gl_Position = rightTrC; // c
        EmitVertex();
        EndPrimitive();

        gl_Position = rightTrC; // c
        EmitVertex();
        gl_Position = rightTrD; // d
        EmitVertex();
        gl_Position = rightTrA; // a
        EmitVertex();
        EndPrimitive();
    }

    FragColor = inColor;

    // generate the triangle strip
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p2 - length_b * miter_b, 0.0, 1.0); // e
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p2 - length_b * miter_b, 0.0, 1.0); // e
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p2 + length_b * miter_b, 0.0, 1.0); // f
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 + length_a * miter_a, 0.0, 1.0); // b
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 - length_a * miter_a, 0.0, 1.0); // a
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 + length_a * miter_a, 0.0, 1.0); // b
    EmitVertex();
    EndPrimitive();
}