#version 330 core

// Texture coords
in vec2 TexToFrag;
in vec4 FragColor;

// Texture number
uniform sampler2D ourTexture;

uniform bool blur = true;
uniform bool horizontal;
uniform float weights[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

layout (std140) uniform TextureData
{
    // Wheter draw texture or primitives
    bool renderTexture;
};

out vec4 outColor;

void main()
{
    if (blur) {
        if (renderTexture) {
            vec2 tex_offset = 1.0 / textureSize(ourTexture, 0);
            vec3 result = texture(ourTexture, TexToFrag).rgb * weights[0];
            if (horizontal) {
                for (int i = 1; i < 5; ++i) {
                    result += texture(ourTexture, TexToFrag
                    + vec2(tex_offset.x * i, 0.0)).rgb * weights[i];
                    result += texture(ourTexture, TexToFrag - vec2(tex_offset.x * i, 0.0)).rgb * weights[i];
                }
            } else {
                for (int i = 1; i < 5; ++i) {
                    result += texture(ourTexture, TexToFrag + vec2(0.0, tex_offset.y * i)).rgb * weights[i];
                    result += texture(ourTexture, TexToFrag - vec2(0.0, tex_offset.y * i)).rgb * weights[i];
                }
            }
            outColor = vec4(result, 1.0);
        } else {
            outColor = FragColor;
        }
    } else {
        if (renderTexture) {
            outColor = texture(ourTexture, TexToFrag);
        } else {
            outColor = FragColor;
        }
    }
}