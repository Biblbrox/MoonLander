#version 330 core

layout (lines_adjacency) in;
layout (triangle_strip, max_vertices = 12) out;

in mat4 GeomProjectionMatrix[4];

void main()
{
    // get the four vertices passed to the shader:
    vec2 p0 = vec2( gl_in[0].gl_Position.xy);	// start of previous segment
    vec2 p1 = vec2( gl_in[1].gl_Position.xy);	// end of previous segment, start of current segment
    vec2 p2 = vec2( gl_in[2].gl_Position.xy);	// end of current segment, start of next segment
    vec2 p3 = vec2( gl_in[3].gl_Position.xy);	// end of next segment

    float THICKNESS = 1.0;

    // determine the direction of each of the 3 segments (previous, current, next)
    vec2 v0 = normalize(p1-p0); // Point to end of first segment
    vec2 v1 = normalize(p2-p1); // Point to end of second segment
    vec2 v2 = normalize(p3-p2); // Point to end of third segment

    // determine the normal of each of the 3 segments (previous, current, next)
    vec2 n0 = vec2(-v0.y, v0.x); // norm of the end of first segment
    vec2 n1 = vec2(-v1.y, v1.x); // norm of the end of second segment
    vec2 n2 = vec2(-v2.y, v2.x); // norm of the end of third segment

    // determine miter lines by averaging the normals of the 2 segments
    vec2 miter_a = normalize(n0 + n1);	// miter at start of current segment
    vec2 miter_b = normalize(n1 + n2);	// miter at end of current segment

    // determine the length of the miter by projecting it onto normal and then inverse it
    float length_a = THICKNESS / dot(miter_a, n1);
    float length_b = THICKNESS / dot(miter_b, n1);

    // generate the triangle strip
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p2 - length_b * miter_b, 0.0, 1.0); // e
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p2 - length_b * miter_b, 0.0, 1.0); // e
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p2 + length_b * miter_b, 0.0, 1.0); // f
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 + length_a * miter_a, 0.0, 1.0); // b
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 - length_a * miter_a, 0.0, 1.0); // a
    EmitVertex();
    EndPrimitive();

    gl_Position = GeomProjectionMatrix[0] * vec4(p1 - length_a * miter_a, 0.0, 1.0); // c
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p1 + length_a * miter_a, 0.0, 1.0); // d
    EmitVertex();
    gl_Position = GeomProjectionMatrix[0] * vec4(p0 + length_a * miter_a, 0.0, 1.0); // b
    EmitVertex();
    EndPrimitive();
}