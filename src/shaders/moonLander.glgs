#version 330 core

layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in vec2 texCoords[];

out vec2 TexCoords;

uniform float time;
uniform mat4 ProjectionMatrix;

vec3 get_normal()
{
    vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
    vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
    return normalize(cross(b, a));
}

vec4 explode(vec4 position, vec3 normal)
{
    vec3 direction = normal * ((sin(time) * 2 + 1.0) / 2.0);
    return position + vec4(direction, 0.0);
}

void main()
{
    vec3 normal = get_normal();
    gl_Position = ProjectionMatrix * explode(gl_in[0].gl_Position, normal);
    TexCoords = texCoords[0];
    EmitVertex();

    gl_Position = ProjectionMatrix * explode(gl_in[1].gl_Position, normal);
    TexCoords = texCoords[1];
    EmitVertex();

    gl_Position = ProjectionMatrix * explode(gl_in[2].gl_Position, normal);
    TexCoords = texCoords[2];
    EmitVertex();

    EndPrimitive();
}